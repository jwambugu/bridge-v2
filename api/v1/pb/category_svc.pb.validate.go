// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: category_svc.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _category_svc_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetCategoryByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCategoryByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCategoryByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCategoryByIDRequestMultiError, or nil if none found.
func (m *GetCategoryByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategoryByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetID()); err != nil {
		err = GetCategoryByIDRequestValidationError{
			field:  "ID",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCategoryByIDRequestMultiError(errors)
	}

	return nil
}

func (m *GetCategoryByIDRequest) _validateUuid(uuid string) error {
	if matched := _category_svc_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetCategoryByIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetCategoryByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCategoryByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoryByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoryByIDRequestMultiError) AllErrors() []error { return m }

// GetCategoryByIDRequestValidationError is the validation error returned by
// GetCategoryByIDRequest.Validate if the designated constraints aren't met.
type GetCategoryByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoryByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoryByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoryByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoryByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoryByIDRequestValidationError) ErrorName() string {
	return "GetCategoryByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCategoryByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoryByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoryByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoryByIDRequestValidationError{}

// Validate checks the field values on GetCategoryBySlugRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCategoryBySlugRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCategoryBySlugRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCategoryBySlugRequestMultiError, or nil if none found.
func (m *GetCategoryBySlugRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategoryBySlugRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSlug()) < 0 {
		err := GetCategoryBySlugRequestValidationError{
			field:  "Slug",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCategoryBySlugRequestMultiError(errors)
	}

	return nil
}

// GetCategoryBySlugRequestMultiError is an error wrapping multiple validation
// errors returned by GetCategoryBySlugRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCategoryBySlugRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoryBySlugRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoryBySlugRequestMultiError) AllErrors() []error { return m }

// GetCategoryBySlugRequestValidationError is the validation error returned by
// GetCategoryBySlugRequest.Validate if the designated constraints aren't met.
type GetCategoryBySlugRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoryBySlugRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoryBySlugRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoryBySlugRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoryBySlugRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoryBySlugRequestValidationError) ErrorName() string {
	return "GetCategoryBySlugRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCategoryBySlugRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoryBySlugRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoryBySlugRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoryBySlugRequestValidationError{}

// Validate checks the field values on GetCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCategoryResponseMultiError, or nil if none found.
func (m *GetCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCategoryResponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCategoryResponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCategoryResponseValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCategoryResponseMultiError(errors)
	}

	return nil
}

// GetCategoryResponseMultiError is an error wrapping multiple validation
// errors returned by GetCategoryResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoryResponseMultiError) AllErrors() []error { return m }

// GetCategoryResponseValidationError is the validation error returned by
// GetCategoryResponse.Validate if the designated constraints aren't met.
type GetCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoryResponseValidationError) ErrorName() string {
	return "GetCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoryResponseValidationError{}

// Validate checks the field values on GetCategoriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCategoriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCategoriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCategoriesRequestMultiError, or nil if none found.
func (m *GetCategoriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategoriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCategoriesRequestMultiError(errors)
	}

	return nil
}

// GetCategoriesRequestMultiError is an error wrapping multiple validation
// errors returned by GetCategoriesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCategoriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoriesRequestMultiError) AllErrors() []error { return m }

// GetCategoriesRequestValidationError is the validation error returned by
// GetCategoriesRequest.Validate if the designated constraints aren't met.
type GetCategoriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoriesRequestValidationError) ErrorName() string {
	return "GetCategoriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCategoriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoriesRequestValidationError{}

// Validate checks the field values on GetCategoriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCategoriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCategoriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCategoriesResponseMultiError, or nil if none found.
func (m *GetCategoriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategoriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCategories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCategoriesResponseValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCategoriesResponseValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCategoriesResponseValidationError{
					field:  fmt.Sprintf("Categories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCategoriesResponseMultiError(errors)
	}

	return nil
}

// GetCategoriesResponseMultiError is an error wrapping multiple validation
// errors returned by GetCategoriesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCategoriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoriesResponseMultiError) AllErrors() []error { return m }

// GetCategoriesResponseValidationError is the validation error returned by
// GetCategoriesResponse.Validate if the designated constraints aren't met.
type GetCategoriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoriesResponseValidationError) ErrorName() string {
	return "GetCategoriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCategoriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoriesResponseValidationError{}

// Validate checks the field values on CreateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCategoryRequestMultiError, or nil if none found.
func (m *CreateCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return CreateCategoryRequestMultiError(errors)
	}

	return nil
}

// CreateCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCategoryRequestMultiError) AllErrors() []error { return m }

// CreateCategoryRequestValidationError is the validation error returned by
// CreateCategoryRequest.Validate if the designated constraints aren't met.
type CreateCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCategoryRequestValidationError) ErrorName() string {
	return "CreateCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCategoryRequestValidationError{}

// Validate checks the field values on CreateCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCategoryResponseMultiError, or nil if none found.
func (m *CreateCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCategoryResponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCategoryResponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCategoryResponseValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCategoryResponseMultiError(errors)
	}

	return nil
}

// CreateCategoryResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCategoryResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCategoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCategoryResponseMultiError) AllErrors() []error { return m }

// CreateCategoryResponseValidationError is the validation error returned by
// CreateCategoryResponse.Validate if the designated constraints aren't met.
type CreateCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCategoryResponseValidationError) ErrorName() string {
	return "CreateCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCategoryResponseValidationError{}

// Validate checks the field values on UpdateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCategoryRequestMultiError, or nil if none found.
func (m *UpdateCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetID()); err != nil {
		err = UpdateCategoryRequestValidationError{
			field:  "ID",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 0 {
		err := UpdateCategoryRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMeta() == nil {
		err := UpdateCategoryRequestValidationError{
			field:  "Meta",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if a := m.GetMeta(); a != nil {

	}

	if len(errors) > 0 {
		return UpdateCategoryRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateCategoryRequest) _validateUuid(uuid string) error {
	if matched := _category_svc_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCategoryRequestMultiError) AllErrors() []error { return m }

// UpdateCategoryRequestValidationError is the validation error returned by
// UpdateCategoryRequest.Validate if the designated constraints aren't met.
type UpdateCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCategoryRequestValidationError) ErrorName() string {
	return "UpdateCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCategoryRequestValidationError{}

// Validate checks the field values on UpdateCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCategoryResponseMultiError, or nil if none found.
func (m *UpdateCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCategoryResponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCategoryResponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCategoryResponseValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCategoryResponseMultiError(errors)
	}

	return nil
}

// UpdateCategoryResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCategoryResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCategoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCategoryResponseMultiError) AllErrors() []error { return m }

// UpdateCategoryResponseValidationError is the validation error returned by
// UpdateCategoryResponse.Validate if the designated constraints aren't met.
type UpdateCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCategoryResponseValidationError) ErrorName() string {
	return "UpdateCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCategoryResponseValidationError{}
